pivot_longer(-date_parsed, names_to = "species", values_to = "count_per_hr")
# Plot
ggplot(heatmap_long, aes(x = species, y = date_parsed, fill = count_per_hr)) +
geom_tile(color = "white") +
scale_fill_viridis_c(trans = "sqrt", option = "magma", na.value = "grey90") +
labs(
title = "Species Composition (standardized by effort)",
x = "Species",
y = "Survey Date",
fill = "Count/hr"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
n_species <- 20
pal <- qualitative_hcl(n_species, palette = "Dynamic")
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "pal") +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
# Stacked barplot
library(colorspace)
n_species <- 20
pal <- qualitative_hcl(n_species, palette = "Dynamic")
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(palette = "pal") +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = "pal") +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
pal <- qualitative_hcl(n_species, palette = "Dynamic")
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = "pal") +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = pal) +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
pal1 <- brewer.pal(12,"Set3")
pal2 <- brewer.pal(8,"Set2")
pal <- c(pal1, pal2)[1:20]
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(palette = "pal") +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(palette = pal) +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
ggplot(heatmap_long, aes(x = date_parsed, y = count_per_hr, fill = species)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = pal) +
labs(x = "Survey date", y = "Counts per hour", fill = "Species") +
theme_minimal()
# After lumping into Other species with less than 10 records, 19 sp left + other
pal1 <- brewer.pal(12,"Set2")
pal2 <- brewer.pal(8,"Set3")
# After lumping into Other species with less than 10 records, 19 sp left + other
pal1 <- brewer.pal(12,"Set1")
display.brewer.all()
# Top 5 species per survey
top_occurrence <- visits_df %>%
group_by(visit_id, date_parsed, english_name) %>%
summarise(n_sightings = n(), .groups = "drop") %>%
group_by(visit_id) %>%
slice_max(order_by = n_sightings, n = 5) %>%
ungroup()
ggplot(top_occurrence, aes(x = reorder(english_name, n_sightings), y = n_sightings, fill = english_name)) +
geom_col() +
facet_wrap(~ date_parsed, scales = "free_y") +
coord_flip() +
labs(x = "Species", y = "# Sightings", title = "Top 5 Species by Occurrence per Survey") +
scale_fill_brewer(palette = "Set3", guide = "none") +
theme_minimal()
ggplot(top_occurrence, aes(x = reorder(english_name, n_sightings), y = n_sightings, fill = english_name)) +
geom_col() +
facet_wrap(~ date_parsed, scales = "free_y") +
coord_flip() +
labs(x = "Species", y = "# Sightings", title = "Top 5 Species by Occurrence per Survey") +
scale_fill_manual(values = pal, guide = "none") +
theme_minimal()
top_abundance <- visits_df %>%
group_by(visit_id, date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(visit_id) %>%
slice_max(order_by = total_per_hr, n = 5) %>%
ungroup()
ggplot(top_abundance, aes(x = reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col() +
facet_wrap(~ date_parsed, scales = "free_y") +
coord_flip() +
labs(x = "Species", y = "Abundance (count/hr)", title = "Top 5 Species by Abundance per Survey") +
scale_fill_manual(values = pal, guide = "none") +
theme_minimal()
# Top 5 per survey
top_abundance <- visits_df %>%
group_by(visit_id, date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(visit_id) %>%
slice_max(order_by = total_per_hr, n = 5) %>%
ungroup()
ggplot(top_abundance, aes(x = reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col() +
facet_wrap(~ date_parsed, scales = "free_y") +
coord_flip() +
labs(x = "Species", y = "Abundance (count/hr)", title = "Top 5 Species by Abundance per Survey") +
scale_fill_brewer(palette = "Set3", guide = "none") +
theme_minimal()
ggplot(top_abundance, aes(x = reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col() +
facet_wrap(~ date_parsed, scales = "free_y") +
coord_flip() +
labs(x = "Species", y = "Abundance (count/hr)", title = "Top 5 Species by Abundance per Survey") +
scale_fill_manual(values = pal, guide = "none") +
theme_minimal()
# Top 5 per survey
top_abundance <- visits_df %>%
group_by(visit_id, date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(visit_id) %>%
mutate(rank = dense_rank(desc(total_per_hr))) %>%
filter(rank <= 5) %>%
ungroup()
ggplot(top_abundance, aes(x = reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col() +
facet_wrap(~ date_parsed, scales = "free_y") +
coord_flip() +
labs(x = "Species", y = "Abundance (count/hr)", title = "Top 5 Species by Abundance per Survey") +
scale_fill_manual(values = pal, guide = "none") +
theme_minimal()
# Top 5 per survey
top5_df <- visits_df %>%
group_by(visit_id, date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(visit_id) %>%
slice_max(total_per_hr, n = 5, with_ties = FALSE) %>%  # Ensure only 5
ungroup()
ggplot(top_species, aes(x = date_parsed, y = total_per_hr, fill = english_name)) +
geom_col() +
scale_fill_brewer(palette = "Set3", name = "Species") +  # can change palette here
labs(x = "Survey Date", y = "Counts per Hour", title = "Top 5 Species per Survey") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Top 5 per survey
top_species <- visits_df %>%
group_by(visit_id, date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(visit_id) %>%
slice_max(order_by = total_per_hr, n = 5, with_ties = FALSE) %>%  # no ties
ungroup()
ggplot(top_species, aes(x = date_parsed, y = total_per_hr, fill = english_name)) +
geom_col() +
scale_fill_brewer(palette = "Set3", name = "Species") +  # can change palette here
labs(x = "Survey Date", y = "Counts per Hour", title = "Top 5 Species per Survey") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Top 5 per survey
top5_by_survey <- visits_df %>%
group_by(date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(date_parsed) %>%
slice_max(order_by = total_per_hr, n = 5, with_ties = FALSE) %>%  # top 5, no ties
ungroup()
ggplot(top5_by_survey, aes(x = fct_reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ date_parsed, scales = "free_y") +
scale_fill_brewer(palette = "Set3") +
labs(
x = "Species",
y = "Counts per Hour",
title = "Top 5 Species per Survey"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")
)
# Top 5 per survey
top5_by_visit <- visits_df %>%
group_by(visit_id, english_name, date_parsed) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(visit_id) %>%
slice_max(order_by = total_per_hr, n = 5, with_ties = FALSE) %>%
ungroup()
ggplot(top5_by_visit, aes(x = fct_reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ visit_id, scales = "free_y") +  # OR facet_grid(date_parsed ~ visit_order) if you have that
scale_fill_brewer(palette = "Set3") +
labs(
x = "Species",
y = "Counts per Hour",
title = "Top 5 Species per Visit"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")
)
# Top 5 per survey
top5_by_date <- visits_df %>%
group_by(date_parsed, english_name) %>%
summarise(total_per_hr = sum(count_per_hr, na.rm = TRUE), .groups = "drop") %>%
group_by(date_parsed) %>%
slice_max(total_per_hr, n = 5, with_ties = FALSE) %>%
ungroup()
ggplot(top5_by_date, aes(x = fct_reorder(english_name, total_per_hr), y = total_per_hr, fill = english_name)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ date_parsed, scales = "free_y") +
scale_fill_brewer(palette = "Set3") +
labs(
x = "Species",
y = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(y = fct_reorder(english_name, total_per_hr), x = total_per_hr, fill = english_name)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ date_parsed, scales = "free_x") +
scale_fill_brewer(palette = "Set3") +
labs(
y = "Species",
x = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.y = element_text(face = "italic"),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(y = reorder_within(english_name, total_per_hr, date_parsed),
x = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +
scale_y_discrete(labels = NULL) +  # Hide species names on y-axis
scale_fill_brewer(palette = "Set3", name = "Species") +
scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
labs(
y = NULL,
x = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
strip.text = element_text(face = "bold"),
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()
)
ggplot(top5_by_date, aes(y = tidytext::reorder_within(english_name, total_per_hr, date_parsed),
x = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +
scale_y_discrete(labels = NULL) +  # Hide species names on y-axis
scale_fill_brewer(palette = "Set3", name = "Species") +
scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
labs(
y = NULL,
x = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
strip.text = element_text(face = "bold"),
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()
)
install.packages("tidytext")
ggplot(top5_by_date, aes(y = tidytext::reorder_within(english_name, total_per_hr, date_parsed),
x = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +
scale_y_discrete(labels = NULL) +  # Hide species names on y-axis
scale_fill_brewer(palette = "Set3", name = "Species") +
scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
labs(
y = NULL,
x = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
strip.text = element_text(face = "bold"),
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()
)
ggplot(top5_by_date, aes(x = total_per_hr, y = english_name, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_y") +  # free y-scale removes empty bars
coord_flip() +  # horizontal bars
scale_fill_brewer(palette = "Set3", name = "Species") +
labs(
x = "Counts per Hour",
y = NULL,
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.y = element_blank(),   # hide species names on y-axis
axis.ticks.y = element_blank(),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(x = english_name, y = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +  # free x-axis to remove empty bars
scale_fill_brewer(palette = "Set3", name = "Species") +
labs(
x = NULL,  # hide x-axis label
y = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_blank(),  # hide species names on x-axis
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(y = english_name, x = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +  # free x-axis to remove empty bars
scale_fill_brewer(palette = "Set3", name = "Species") +
labs(
y = NULL,  # hide x-axis label
x = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_blank(),  # hide species names on x-axis
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(x = english_name, y = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +  # free x-axis to remove empty bars
scale_fill_brewer(palette = "Set3", name = "Species") +
labs(
x = NULL,  # hide x-axis label
y = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_blank(),  # hide species names on x-axis
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(x = english_name, y = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +  # free x-axis to remove empty bars
scale_fill_brewer(palette = "Set2", name = "Species") +
labs(
x = NULL,  # hide x-axis label
y = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_blank(),  # hide species names on x-axis
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(x = english_name, y = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +  # free x-axis to remove empty bars
scale_fill_brewer(palette = "Set1", name = "Species") +
labs(
x = NULL,  # hide x-axis label
y = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_blank(),  # hide species names on x-axis
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
ggplot(top5_by_date, aes(x = english_name, y = total_per_hr, fill = english_name)) +
geom_col(show.legend = TRUE) +
facet_wrap(~ date_parsed, scales = "free_x") +  # free x-axis to remove empty bars
scale_fill_brewer(palette = "Set3", name = "Species") +
labs(
x = NULL,  # hide x-axis label
y = "Counts per Hour",
title = "Top 5 Species per Survey Date"
) +
theme_minimal(base_size = 13) +
theme(
axis.text.x = element_blank(),  # hide species names on x-axis
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
library(arrow)
library(glue)
library(here)
library(httr)
library(janitor)
library(purrr)
library(readr)
library(tidyverse)
source("02_scripts/01_config.R")
library(here)
# Define core file paths based on project root
project_root <- here::here()  # Automatically finds root of project (e.g., RStudio project or Git repo)
visits_sf <- st_read(shpfiles[1]) %>% st_transform(crs = 4326) # visits
library(dplyr)
library(ggplot2)
library(googlesheets4)          # To read google sheets
library(janitor)
library(leaflet)
library(purrr)
library(readr)
library(sf)
library(tidyr)
visits_sf <- st_read(shpfiles[1]) %>% st_transform(crs = 4326) # visits
# BUT: below, creating one single Visits object containing likely all relevant info from other objects associated.
readRDS("C:/Users/cbarile/My Drive/PostDoc UvA/TABMON/R_PROJECTS/termap_project/01_datatermap_bugg_metadata.rds")
# BUT: below, creating one single Visits object containing likely all relevant info from other objects associated.
datasets <- readRDS("C:/Users/cbarile/My Drive/PostDoc UvA/TABMON/R_PROJECTS/termap_project/01_data/termap_bugg_metadata.rds")
# BUT: below, creating one single Visits object containing likely all relevant info from other objects associated.
datasets <- readRDS("C:/Users/cbarile/My Drive/PostDoc UvA/TABMON/R_PROJECTS/termap_project/01_data/processed/termap_bugg_metadata.rds")
View(datasets)
# --- Clean Overview ---
overview_clean <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time_parsed = as_hms(start_time),
end_time_parsed = as_hms(end_time)
)
# --- Clean Overview ---
library(lubridate)
overview_clean <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time_parsed = as_hms(start_time),
end_time_parsed = as_hms(end_time)
)
library(hms)
overview_clean <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time_parsed = as_hms(start_time),
end_time_parsed = as_hms(end_time)
)
View(overview_clean)
overview_clean <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time = as_hms(start_time),
end_time = as_hms(end_time)
)
# --- Clean Visits ---
visits_clean <- datasets$Visits %>%
mutate(
date = make_date(year, month, day)       # year/month/day -> Date
)
View(visits_clean)
datasets$Overview <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time = as_hms(start_time),
end_time = as_hms(end_time)
)
# --- Clean Visits ---
datasets$Visits <- datasets$Visits %>%
mutate(
date = make_date(year, month, day)       # year/month/day -> Date
)
saveRDS(datasets, file = "termap_bugg_metadata.rds")
# BUT: below, creating one single Visits object containing likely all relevant info from other objects associated.
datasets <- readRDS("C:/Users/cbarile/My Drive/PostDoc UvA/TABMON/R_PROJECTS/termap_project/01_data/processed/termap_bugg_metadata.rds")
# BUT: below, creating one single Visits object containing likely all relevant info from other objects associated.
datasets <- readRDS("C:/Users/cbarile/My Drive/PostDoc UvA/TABMON/R_PROJECTS/termap_project/01_data/processed/termap_bugg_metadata.rds")
# --- Clean Overview ---
library(lubridate)
library(hms)
datasets$Overview <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time = as_hms(start_time),
end_time = as_hms(end_time)
)
library(dplyr)
library(ggplot2)
library(googlesheets4)          # To read google sheets
library(janitor)
library(leaflet)
library(purrr)
library(readr)
library(sf)
library(tidyr)
datasets$Overview <- datasets$Overview %>%
mutate(
date_parsed = dmy(paste(date, year)),           # e.g., "23-Mar 2025"
start_time = as_hms(start_time),
end_time = as_hms(end_time)
)
View(datasets$Overview)
